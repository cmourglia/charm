#pragma once

typedef enum TokenType
{
	TOKEN_EOF,
	TOKEN_INVALID,
	TOKEN_COMMENT,

	TOKEN_OPEN_PAREN,
	TOKEN_CLOSE_PAREN,
	TOKEN_OPEN_SQUIRLY,
	TOKEN_CLOSE_SQUIRLY,
	TOKEN_OPEN_BRACKET,
	TOKEN_CLOSE_BRACKET,

	TOKEN_COMMA,
	TOKEN_DOT,
	TOKEN_SEMICOLON,

	// TODO: Add += -= *= /=
	TOKEN_MINUS,
	TOKEN_PLUS,
	TOKEN_SLASH,
	TOKEN_STAR,

	TOKEN_BANG_EQUAL,
	TOKEN_EQUAL,
	TOKEN_EQUAL_EQUAL,
	TOKEN_GREATER,
	TOKEN_GREATER_EQUAL,
	TOKEN_LESS,
	TOKEN_LESS_EQUAL,

	TOKEN_IDENTIFIER,
	TOKEN_STRING,
	TOKEN_NUMBER,

	TOKEN_AND,
	TOKEN_ELSE,
	TOKEN_FALSE,
	TOKEN_FOR,
	TOKEN_FUNCTION,
	TOKEN_IF,
	TOKEN_NIL,
	TOKEN_NOT,
	TOKEN_OR,
	TOKEN_RETURN,
	TOKEN_STRUCT,
	TOKEN_TRUE,
	TOKEN_VAR,
	TOKEN_WHILE,

	// Remove at some point
	TOKEN_SUPER,
	TOKEN_THIS,
} TokenType;

typedef struct Token
{
	const char *lexeme_start;
	TokenType type;
	int lexeme_len;
} Token;
